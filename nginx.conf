worker_processes auto;
events {
    worker_connections 1024;
}

# RTMP 配置
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow play all;
        allow publish all;
        
        # 用于接收外部推流的主应用
        application live {
            live on;
            record off;
            
            # 降低延迟的配置
            wait_key off;
            wait_video off;
            publish_notify on;
            play_restart on;
            drop_idle_publisher 10s;
            
            # 生成HLS流供前端播放
            hls on;
            hls_path /tmp/hls;
            hls_fragment 2s;
            hls_playlist_length 8s;
            hls_cleanup on;
            hls_sync 100ms;
            
            # 生成DASH流（可选）
            dash on;
            dash_path /tmp/dash;
            dash_fragment 2s;
            dash_playlist_length 8s;
            dash_cleanup on;
            
            # 录制功能（可选）
            # record all;
            # record_path /tmp/recordings;
            # record_suffix .flv;
            # record_unique on;
            # record_unique_suffix on;
            
            # 推流认证（可选）
            # on_publish http://localhost:8000/api/rtmp/auth;
            
            # 推流回调通知
            on_publish http://localhost:8000/api/ai/rtmp/publish;
            on_publish_done http://localhost:8000/api/ai/rtmp/publish_done;
        }
        
        # AI处理应用 - 接收处理后的流
        application ai_processed {
            live on;
            record off;
            
            # 只允许本地推流
            allow publish 127.0.0.1;
            deny publish all;
            allow play all;
            
            # 生成HLS流
            hls on;
            hls_path /tmp/hls_processed;
            hls_fragment 2s;
            hls_playlist_length 8s;
            hls_cleanup on;
        }
        
        # 转码应用 - 多码率支持
        application transcoded {
            live on;
            record off;
            
            # 转码配置
            exec ffmpeg -i rtmp://localhost/live/$name
                -c:v libx264 -b:v 800k -s 1280x720 -preset fast -tune zerolatency
                -c:a aac -b:a 128k -ar 44100
                -f flv rtmp://localhost/transcoded/$name_720p
                
                -c:v libx264 -b:v 400k -s 854x480 -preset fast -tune zerolatency
                -c:a aac -b:a 96k -ar 44100
                -f flv rtmp://localhost/transcoded/$name_480p
                
                -c:v libx264 -b:v 200k -s 640x360 -preset fast -tune zerolatency
                -c:a aac -b:a 64k -ar 44100
                -f flv rtmp://localhost/transcoded/$name_360p;
                
            exec_kill_signal term;
        }
    }
}

# HTTP 配置
http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # API服务器代理
    upstream backend_api {
        server 127.0.0.1:8001;  # Django后端
        keepalive 32;
    }
    
    upstream ai_service {
        server 127.0.0.1:8002;  # AI服务
        keepalive 32;
    }
    
    # 主服务器
    server {
        listen 8000;
        server_name localhost;
        client_max_body_size 100M;
        
        # 前端静态文件
        location / {
            root /path/to/frontend/dist;
            try_files $uri $uri/ /index.html;
            
            # 缓存控制
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # API代理到后端
        location /api/ {
            proxy_pass http://backend_api/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
        }
        
        # AI服务代理
        location /api/ai/ {
            proxy_pass http://ai_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_buffering off;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }
        
        # WebSocket代理
        location /ws/ {
            proxy_pass http://backend_api/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # 视频流服务器
    server {
        listen 8080;
        server_name localhost;
        
        # CORS头部
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        
        # HLS 原始流
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            expires -1;
        }
        
        # HLS 处理后的流
        location /hls_processed {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            expires -1;
        }
        
        # DASH 流
        location /dash {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            expires -1;
        }
        
        # HTTP-FLV 流
        location /live {
            flv_live on;
            chunked_transfer_encoding on;
            add_header Access-Control-Allow-Origin *;
            add_header Cache-Control no-cache;
        }
        
        # RTMP统计页面
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            add_header Access-Control-Allow-Origin *;
        }
        
        location /stat.xsl {
            root /path/to/nginx/html;
        }
        
        # RTMP控制接口
        location /control {
            rtmp_control all;
            add_header Access-Control-Allow-Origin *;
        }
        
        # 静态视频文件
        location /videos {
            root /tmp;
            add_header Cache-Control no-cache;
        }
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
} 